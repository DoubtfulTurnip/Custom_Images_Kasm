# .github/workflows/build-epagnuel.yml
name: Build Epagnuel Kasm Image

on:
  # Trigger on pushes to main branch that affect Epagnuel
  push:
    branches: [ main, master ]
    paths:
      - 'Epagnuel-Kasm/**'
      - '.github/workflows/build-epagnuel.yml'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of application images'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: docker.io
  DOCKER_HUB_USERNAME: bukshee
  IMAGE_NAME: epagnuel-kasm

jobs:
  build-kasm-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for Kasm image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=1.17.0
            type=raw,value=latest
            type=ref,event=branch
          labels: |
            org.opencontainers.image.title=Epagnuel Kasm Workspace
            org.opencontainers.image.description=Windows Event Log Visualization Tool for Kasm
            org.opencontainers.image.vendor=DoubtfulTurnip

      - name: Validate Epagnuel directory
        run: |
          if [[ ! -d "Epagnuel-Kasm" ]]; then
            echo "❌ Epagnuel-Kasm directory not found"
            exit 1
          fi
          if [[ ! -f "Epagnuel-Kasm/Dockerfile" ]]; then
            echo "❌ Dockerfile not found in Epagnuel-Kasm"
            exit 1
          fi
          echo "✅ Epagnuel-Kasm directory and Dockerfile found"

      - name: Build and push Kasm image
        uses: docker/build-push-action@v5
        with:
          context: Epagnuel-Kasm
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-application-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Clone Epagnuel source
        run: |
          echo "📥 Cloning Epagnuel source..."
          git clone https://github.com/jurelou/epagneul.git /tmp/epagneul
          cd /tmp/epagneul
          echo "✅ Cloned Epagnuel to /tmp/epagneul"

      - name: Build Epagnuel application images
        run: |
          cd /tmp/epagneul
          
          # Determine which compose file to use
          if [[ -f "docker-compose-prod.yml" ]]; then
            COMPOSE_FILE="docker-compose-prod.yml"
          elif [[ -f "docker-compose.yml" ]]; then
            COMPOSE_FILE="docker-compose.yml"
          else
            echo "❌ No docker-compose file found"
            exit 1
          fi
          
          echo "📋 Using compose file: $COMPOSE_FILE"
          
          # Build the application images
          echo "🔨 Building Epagnuel application images..."
          docker compose -f "$COMPOSE_FILE" build --no-cache
          
          echo "✅ Application images built successfully"

      - name: Tag and push application images
        run: |
          cd /tmp/epagneul
          
          # Get the project name (directory name)
          PROJECT_NAME=$(basename $(pwd))
          echo "📦 Project name: $PROJECT_NAME"
          
          # List built images for debugging
          echo "🔍 Available images:"
          docker images | grep -E "(${PROJECT_NAME}|epagneul)" || echo "No matching images found"
          
          # Tag and push each service
          for service in backend frontend; do
            # Try different possible image names
            possible_names=(
              "${PROJECT_NAME}-${service}:latest"
              "${PROJECT_NAME}_${service}:latest"
              "epagneul-${service}:latest"
              "epagneul_${service}:latest"
            )
            
            SOURCE_IMAGE=""
            for name in "${possible_names[@]}"; do
              if docker image inspect "$name" >/dev/null 2>&1; then
                SOURCE_IMAGE="$name"
                break
              fi
            done
            
            if [[ -n "$SOURCE_IMAGE" ]]; then
              echo "🏷️  Tagging $service from $SOURCE_IMAGE..."
              
              # Create target image names
              TARGET_IMAGE_VERSIONED="${{ env.DOCKER_HUB_USERNAME }}/epagneul-${service}:1.17.0"
              TARGET_IMAGE_LATEST="${{ env.DOCKER_HUB_USERNAME }}/epagneul-${service}:latest"
              
              # Tag and push
              docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE_VERSIONED"
              docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE_LATEST"
              
              echo "📤 Pushing $service images..."
              docker push "$TARGET_IMAGE_VERSIONED"
              docker push "$TARGET_IMAGE_LATEST"
              
              echo "✅ Successfully pushed $service"
            else
              echo "⚠️  Image for $service not found, skipping..."
              echo "Available images:"
              docker images --format "table {{.Repository}}:{{.Tag}}" | head -10
            fi
          done

      - name: Verify pushed images
        run: |
          echo "🔍 Verifying pushed images..."
          for service in backend frontend; do
            IMAGE="${{ env.DOCKER_HUB_USERNAME }}/epagneul-${service}:1.17.0"
            if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
              echo "✅ $service image verified on Docker Hub"
            else
              echo "❌ $service image not found on Docker Hub"
            fi
          done

  create-optimized-compose:
    needs: build-application-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create runtime compose file
        run: |
          mkdir -p runtime-configs
          
          cat > runtime-configs/docker-compose-runtime.yml << 'EOF'
          version: '3.8'
          
          services:
            backend:
              image: bukshee/epagneul-backend:1.17.0
              container_name: "${COMPOSE_PROJECT_NAME:-epagneul}-backend"
              ports:
                - "8000:8000"
              depends_on:
                - neo4j
              networks:
                - backend
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
          
            frontend:
              image: bukshee/epagneul-frontend:1.17.0
              container_name: "${COMPOSE_PROJECT_NAME:-epagneul}-frontend"
              ports:
                - "8080:8080"
              depends_on:
                - backend
              networks:
                - backend
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s
          
            neo4j:
              image: neo4j:4.4-community
              container_name: "${COMPOSE_PROJECT_NAME:-epagneul}-neo4j"
              ports:
                - "7474:7474"
                - "7687:7687"
              environment:
                - NEO4J_AUTH=neo4j/password
                - NEO4J_apoc_export_file_enabled=true
                - NEO4J_apoc_import_file_enabled=true
                - NEO4J_apoc_import_file_use__neo4j__config=true
                - NEO4J_dbms_memory_heap_initial__size=512m
                - NEO4J_dbms_memory_heap_max__size=1G
              volumes:
                - neo4j_data:/data
                - neo4j_logs:/logs
                - neo4j_import:/import
              networks:
                - backend
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:7474"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 120s
          
          volumes:
            neo4j_data:
              name: "${COMPOSE_PROJECT_NAME:-epagneul}_neo4j_data"
            neo4j_logs:
              name: "${COMPOSE_PROJECT_NAME:-epagneul}_neo4j_logs"
            neo4j_import:
              name: "${COMPOSE_PROJECT_NAME:-epagneul}_neo4j_import"
          
          networks:
            backend:
              name: "${COMPOSE_PROJECT_NAME:-epagneul}_backend"
              driver: bridge
          EOF
          
          echo "✅ Runtime compose file created"

      - name: Upload runtime compose as artifact
        uses: actions/upload-artifact@v4
        with:
          name: epagneul-runtime-config
          path: runtime-configs/
          retention-days: 30

  summary:
    needs: [build-kasm-image, build-application-images, create-optimized-compose]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build summary
        run: |
          echo "# 🩸 Epagnuel Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Images Built:" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Kasm Image**: \`bukshee/epagneul-kasm:1.17.0\`" >> $GITHUB_STEP_SUMMARY
          echo "- ⚙️ **Backend**: \`bukshee/epagneul-backend:1.17.0\`" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Frontend**: \`bukshee/epagneul-frontend:1.17.0\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Usage:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update your Kasm workspace to use \`bukshee/epagneul-kasm:1.17.0\`" >> $GITHUB_STEP_SUMMARY
          echo "2. The workspace will now use pre-built images for much faster startup" >> $GITHUB_STEP_SUMMARY
          echo "3. Download the runtime compose file from build artifacts if needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-kasm-image.result }}" == "success" && "${{ needs.build-application-images.result }}" == "success" ]]; then
            echo "✅ **Status**: All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Some builds failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
